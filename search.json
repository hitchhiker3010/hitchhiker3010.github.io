[
  {
    "objectID": "posts/2024-12-18-Building Chrome Extension with Zero Web-Dev Experience.html",
    "href": "posts/2024-12-18-Building Chrome Extension with Zero Web-Dev Experience.html",
    "title": "Building Chrome Extension with Zero Web-Dev Knowledge!",
    "section": "",
    "text": "Screenshot of WebSummarizer Chrome Extension\n\n\nWith all the buzz about Code Generation Models and IDEs, I decided to test them out myself. Iâ€™ve been using these tools for my Python/PyTorch projects for a long time now, but I was blown away by how quickly they let me iterate through unfamiliar programming languages.\nI managed to create a working Chrome extension in just under 6 hours, and I didnâ€™t spend a single penny! Iâ€™m not exactly a web developer, so Iâ€™m really impressed with what I accomplished.\nI was tinkering with the idea of making a mini version of Microsoft Copilot / Apple Intelligence for a while now, and I wanted to push the limits by running the LLM on the browser. So, I decided to build a Chrome extension that lets me summarize and ask questions about any webpage.\n\nHigh level overview of the process\n\n\nI jotted down a quick summary of the idea and its features.\nI prompted a LLM to act as a Product Manager and help me create a Product Requirement Document (PRD). After we chatted about the requirements, I made some final changes to the PRD.\nPresented the PRD to Cursorâ€™s Composer for the initial Project creation. Then, I used its Chat feature to help it fix any errors and guide it through the process.\n\n\n\nTools\nTaking it a step further, I challenged myself to do it all without spending anything from my pocket. Here are the tools that helped me make this a reality.\nModels:\n\nLlama3.3 70B Instruct\nClaude Sonnet 3.5\nQwen-2.5-Coder-32B\n\nIDE: Cursor\nFrameworks: WebLLM\nWebsites: HuggingChat\n\n\nObservations\nI started out integrating transformers.js for in-browser LLM inference but wasnâ€™t successful at debugging the errors I was running into. Neither did I get much help anywhere.\nSo, I decided to give WebLLM a try since it had better documentation and more questions answered on Stackoverflow and similar places.\nThough Cursor generated working code most of the time and other times it fixed the code after just giving the Stack Trace. It struggled generating code for relatively new libraries like WebLLM. One-shot prompting using the examples from the documentation instantly helped it generate working code.\nMy skills of going through a new codebase quickly and error debugging(the ones that Cursor couldnâ€™t fix by itself ðŸ˜‚) that I acquired over the period of time helped a lot, reinforcing my belief that one can easily code in a new language if their programming fundamentals are right, which just got further accelerated with these new tools.\n\n\nSome thoughts\n\nWhen choosing tools or frameworks, make sure they have good documentation and support.\nLibraries and packages should consider adding llm-ctx, which is a fantastic project by the talented folks at Answer.Ai. It helps add the necessary context to IDEs, making it easier to generate working code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sukesh Perla",
    "section": "",
    "text": "Building Chrome Extension with Zero Web-Dev Knowledge!\n\n\n\n\n\n\n\n\n\n\n\nDec 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHello World!\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2024\n\n\n\n\n\n\nNo matching items"
  }
]